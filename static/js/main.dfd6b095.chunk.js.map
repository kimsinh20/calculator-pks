{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","calc","setCalc","result","setResult","ops","uplateCalc","value","includes","slice","eval","toString","error","createDigits","digits","i","push","onClick","calclate","err","deleteLast","clearAll","className","type","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"q3BAEA,SAASA,MAAO,IAAD,UACWC,oDAAS,IADpB,yNACNC,KADM,cACAC,QADA,yBAEeF,oDAAS,IAFxB,0NAENG,OAFM,cAEEC,UAFF,cAGPC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BC,WAAa,SAAbA,WAAcC,OAClB,GACGF,IAAIG,SAASD,QAAmB,KAATN,MACvBI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,IAEjD,MAAO,OAET,IACEP,QAAQD,KAAOM,OACVF,IAAIG,SAASD,QAChBH,UAAUM,KAAKT,KAAOM,OAAOI,YAE/B,MAAOC,OACPR,UAAU,WAGRS,aAAe,WAEnB,IADA,IAAMC,EAAS,GADU,WAEhBC,GACPD,EAAOE,KACL,qEAAQC,QAAS,kBAAMX,WAAWS,EAAEJ,aAApC,SACGI,GADmDA,KAFjDA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAOT,OAAOD,GAEHI,SAAW,SAAXA,WACJ,IACEhB,QAAQQ,KAAKT,MAAMU,YACnB,MAAOQ,KACPjB,QAAQ,WAGNkB,WAAa,WACjB,GAAa,KAATnB,KAAJ,CACA,IAAMM,EAAQN,KAAKQ,MAAM,GAAI,GAC7BP,QAAQK,KAEJc,SAAW,WACfnB,QAAQ,IACRE,UAAU,KAEZ,OACE,kEAAKkB,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,yFACA,mEAAKA,UAAU,SAAf,UACE,0FACA,oEAAOC,KAAK,OAAOC,aAAcrB,YAEnC,mEAAKmB,UAAU,UAAf,UACGnB,OAAS,kFAAQA,OAAR,OAA0B,GACnCF,MAAQ,OAEX,mEAAKqB,UAAU,YAAf,UACE,qEAAQL,QAAS,kBAAMX,WAAW,MAAlC,eACA,qEAAQW,QAAS,kBAAMX,WAAW,MAAlC,eACA,qEAAQW,QAAS,kBAAMX,WAAW,MAAlC,eACA,qEAAQW,QAAS,kBAAMX,WAAW,MAAlC,eACA,qEAAQW,QAASG,WAAjB,iBACA,qEAAQH,QAASI,SAAjB,sBAEF,mEAAKC,UAAU,SAAf,UACGT,eACD,qEAAQI,QAAS,kBAAMX,WAAW,MAAlC,eACA,qEAAQW,QAAS,kBAAMX,WAAW,MAAlC,eACA,qEAAQW,QAASC,SAAjB,uBAOKnB,2B,gICpEA0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrC,EAAA,EAAD,MAEFsC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dfd6b095.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./style.css\";\nfunction App() {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const ops = [\"/\", \"*\", \"+\", \"-\", \".\"];\n  const uplateCalc = (value) => {\n    if (\n      (ops.includes(value) && calc === \"\") ||\n      (ops.includes(value) && ops.includes(calc.slice(-1)))\n    ) {\n      return \"lose\";\n    }\n    try {\n      setCalc(calc + value);\n      if (!ops.includes(value)) {\n        setResult(eval(calc + value).toString());\n      }\n    } catch (error) {\n      setResult(\"Error\");\n    }\n  };\n  const createDigits = () => {\n    const digits = [];\n    for (let i = 1; i < 10; i++) {\n      digits.push(\n        <button onClick={() => uplateCalc(i.toString())} key={i}>\n          {i}\n        </button>\n      );\n    }\n    return digits;\n  };\n  const calclate = () => {\n    try {\n      setCalc(eval(calc).toString());\n    } catch (err) {\n      setCalc(\"Error\");\n    }\n  };\n  const deleteLast = () => {\n    if (calc === \"\") return;\n    const value = calc.slice(0, -1);\n    setCalc(value);\n  };\n  const clearAll = () => {\n    setCalc(\"\");\n    setResult(\"\");\n  };\n  return (\n    <div className='App'>\n      <div className='calculator'>\n        <h2>Calculator</h2>\n        <div className='result'>\n          <span>result : </span>\n          <input type='text' defaultValue={result} />\n        </div>\n        <div className='display'>\n          {result ? <span>({result})</span> : \"\"}\n          {calc || \"0\"}\n        </div>\n        <div className='operators'>\n          <button onClick={() => uplateCalc(\"/\")}>/</button>\n          <button onClick={() => uplateCalc(\"*\")}>*</button>\n          <button onClick={() => uplateCalc(\"+\")}>+</button>\n          <button onClick={() => uplateCalc(\"-\")}>-</button>\n          <button onClick={deleteLast}>DEL</button>\n          <button onClick={clearAll}>CLEAR</button>\n        </div>\n        <div className='digits'>\n          {createDigits()}\n          <button onClick={() => uplateCalc(\"0\")}>0</button>\n          <button onClick={() => uplateCalc(\".\")}>.</button>\n          <button onClick={calclate}>=</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}